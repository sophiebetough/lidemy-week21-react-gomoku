{"version":3,"sources":["Square.js","Board.js","Game.js","calculateWinner.js","index.js"],"names":["Button","styled","div","Black","White","Square","value","onClick","button","BoardRow","Row","Board","squares","map","row","yIndex","color","xIndex","GameContainer","GameTitle","h1","GameInfoWrapper","GameWinnerMessage","GamePlayerMessage","RestartButton","Game","useState","Array","fill","board","setBoard","blackIsNext","setBlackIsNext","stepPlayed","setStepPlayed","currentX","setCurrentX","currentY","setCurrentY","blackOrWhite","winner","total","directionX","directionY","chessInRow","nextX","nextY","calculateWinner","boardCopy","GlobalStyle","createGlobalStyle","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b61d846a.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Button = styled.div`\n  display: table;\n  float: left;\n  margin: 0;\n  width: 25px;\n  height: 25px;\n  border: 0.1px solid #d1d1d1;\n  cursor: pointer;\n  &:active {\n    transform: scale(0.98, 0.98);\n  }\n`;\n\nconst Black = styled.div`\n  content: \"\";\n  background-color: #000000;\n  width: 20px;\n  height: 20px;\n  border: 0;\n  margin: 2px auto 0;\n  border-radius: 50%;\n  justify-content: center;\n  box-shadow: 0 2px 2px 2px rgba(0, 0, 0, 0.2);\n`;\n\nconst White = styled.div`\n  content: \"\";\n  background-color: #fcfcfc;\n  width: 20px;\n  height: 20px;\n  border: 0;\n  margin: 2px auto 0;\n  border-radius: 50%;\n  box-shadow: 0 2px 2px 2px rgba(0, 0, 0, 0.2);\n`;\n\nconst Square = ({ value, onClick }) => {\n  let button = null;\n  if (value) {\n    value === \"black\" ? (button = <Black />) : (button = <White />);\n  }\n  return <Button onClick={onClick}>{button}</Button>;\n};\n\nexport default Square;\n","import React from \"react\";\nimport Square from \"./Square\";\nimport styled from \"styled-components\";\n\nconst BoardRow = styled.div`\n  margin: 30px auto;\n  height: 475px;\n  width: 475px;\n  background-color: #f0f0f0;\n  box-shadow: 0 5px 5px 5px rgba(0, 0, 0, 0.2);\n  border-radius: 5px;\n`;\n\nconst Row = styled.div``;\n\nexport default function Board({ squares, onClick }) {\n  return (\n    <BoardRow>\n      {squares.map((row, yIndex) => (\n        <Row key={yIndex}>\n          {row.map((color, xIndex) => (\n            <Square\n              key={xIndex}\n              value={color}\n              onClick={() => onClick(xIndex, yIndex)}\n            />\n          ))}\n        </Row>\n      ))}\n    </BoardRow>\n  );\n}\n","import React, { useState } from \"react\";\nimport Board from \"./Board\";\nimport calculateWinner from \"./calculateWinner\";\nimport styled from \"styled-components\";\n\nconst GameContainer = styled.div``;\n\nconst GameTitle = styled.h1`\n  color: #3b3b3b;\n  font-size: 60px;\n  letter-spacing: 2px;\n  text-align: center;\n  margin: 30px auto 10px auto;\n`;\n\nconst GameInfoWrapper = styled.div`\n  display: flex;\n  max-width: 480px;\n  margin: 0 auto;\n  padding: 8px 0px;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst GameWinnerMessage = styled.div`\n  color: #ff0f00;\n  font-weight: bold;\n  font-size: 1.6rem;\n`;\n\nconst GamePlayerMessage = styled.div`\n  color: #3b3b3b;\n  font-size: 24px;\n`;\n\nconst RestartButton = styled.button`\n  cursor: pointer;\n  font-size: 1.3rem;\n  height: 2.5rem;\n  border: none;\n  border-radius: 10px;\n  color: #ffffff;\n  background-color: #333333;\n  outline: none;\n  padding: 0.2rem 1.2rem;\n  box-shadow: 0 0.3rem rgba(121, 121, 121, 0.7);\n\n  &:hover {\n    filter: brightness(105%);\n  }\n\n  &:active {\n    transform: translate(0, 0.3rem);\n  }\n`;\n\nconst Game = () => {\n  const [board, setBoard] = useState(Array(19).fill(Array(19).fill(null)));\n  const [blackIsNext, setBlackIsNext] = useState(true);\n  const [stepPlayed, setStepPlayed] = useState(0);\n  const [currentX, setCurrentX] = useState(null);\n  const [currentY, setCurrentY] = useState(null);\n  const blackOrWhite = blackIsNext ? \"black\" : \"white\";\n  const winner = calculateWinner(board, currentX, currentY);\n\n  const handleClick = (xIndex, yIndex) => {\n    setCurrentX(xIndex);\n    setCurrentY(yIndex);\n    const boardCopy = [...board];\n    // if player click an occupied square or if game is won.\n    if (winner || boardCopy[yIndex][xIndex]) return;\n\n    setBoard(\n      boardCopy.map((row, currentY) => {\n        if (currentY !== yIndex) {\n          return row;\n        }\n        return row.map((color, currentX) => {\n          if (currentX !== xIndex) {\n            return color;\n          }\n          return blackOrWhite;\n        });\n      })\n    );\n    setStepPlayed(stepPlayed + 1);\n    setBlackIsNext(!blackIsNext);\n  };\n\n  return (\n    <>\n      <GameContainer>\n        <GameTitle>GOMOKU</GameTitle>\n        <GameInfoWrapper>\n          <GamePlayerMessage>\n            Player：{blackOrWhite === \"black\" ? \"黑子\" : \"白子\"}\n          </GamePlayerMessage>\n          {winner && (\n            <GameWinnerMessage>\n              Winner {winner === \"black\" ? \"黑子\" : \"白子\"}\n            </GameWinnerMessage>\n          )}\n          <RestartButton\n            onClick={() => setBoard(Array(19).fill(Array(19).fill(null)))}\n          >\n            Restart\n          </RestartButton>\n        </GameInfoWrapper>\n        <Board squares={board} onClick={handleClick} />\n      </GameContainer>\n    </>\n  );\n};\n\nexport default Game;\n","export default function calculateWinner(squares, currentX, currentY) {\n  if (currentX === null || currentY === null) return;\n  const blackOrWhite = squares[currentY][currentX];\n  let winner;\n  const total = (blackOrWhite, currentX, currentY, directionX, directionY) => {\n    let chessInRow = 0;\n    let nextX = currentX;\n    let nextY = currentY;\n\n    while (chessInRow < 5) {\n      nextX += directionX;\n      nextY += directionY;\n      if (\n        nextX < 0 ||\n        nextX >= 19 ||\n        nextY < 0 ||\n        nextY >= 19 ||\n        squares[nextY][nextX] !== blackOrWhite\n      )\n        break;\n      chessInRow++;\n    }\n    return chessInRow;\n  };\n\n  if (\n    total(blackOrWhite, currentX, currentY, 1, 0) +\n      total(blackOrWhite, currentX, currentY, -1, 0) >=\n      4 ||\n    total(blackOrWhite, currentX, currentY, 0, 1) +\n      total(blackOrWhite, currentX, currentY, 0, -1) >=\n      4 ||\n    total(blackOrWhite, currentX, currentY, 1, 1) +\n      total(blackOrWhite, currentX, currentY, -1, -1) >=\n      4 ||\n    total(blackOrWhite, currentX, currentY, -1, 1) +\n      total(blackOrWhite, currentX, currentY, 1, -1) >=\n      4\n  ) {\n    winner = blackOrWhite;\n  }\n  return winner;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Game from \"./Game\";\nimport { createGlobalStyle } from \"styled-components\";\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background: #f0f0f0;\n  }\n`;\n\nReactDOM.render(\n  <>\n    <GlobalStyle />\n    <Game />\n  </>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}